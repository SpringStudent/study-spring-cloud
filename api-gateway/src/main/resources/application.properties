spring.application.name=api-gateway
server.port=1101
eureka.client.service-url.defaultZone=http://localhost:1001/eureka/

###没有服务治理框架的帮助下的路由配置
##/user-service/**规则的请求路由到http://localhost:8080,比如当请求
##http://localhost:1101/user-service/hello被发送到API网关上时,由于
##/user-service/hello能够被上述配置的path规则匹配，请求将会路由到
##http://localhost:8080/hello
#zuul.routes.user-service.path=/user-service/**
#zuul.routes.user-service.url=http://localhost:8080

##该配置实现了对符合/user-service/**规则的请求路径转发到http://localhost:8080/和http://localhost:8081/两个实例地址的路由规则。
##它的配置方式与服务路由的配置方式一样，都采用了zuul.routes.<route>.path与zuul.routes.<route>.serviceId参数对的映射方式，
##只是这里的serviceId是由用户手工命名的服务名称，配合<serviceId>.ribbon.listOfServers参数实现服务与实例的维护。
##由于存在多个实例，API网关在进行路由转发时需要实现负载均衡策略，
##于是这里还需要Spring Cloud Ribbon的配合。
##由于在Spring Cloud Zuul中自带了对Ribbon的依赖，
##所以我们只需要做一些配置即可
#zuul.routes.user-service.path=/user-service/**
#zuul.routes.user-service.service-id=user-service
##默认情况下ribbon会根据服务发现机制来获取配置服务名对应的实例清单，所以如果没有整合服务治理框架
##需要将参数配置为false，不然配置的serviceId无法获取到服务实例清单
#ribbon.eureka.enabled=false
##该参数内容与zuul.routes.<route>.serviceId的配置相对应，开头的user-service对应了serviceId的值，
##这两个参数的配置相当于在该应用内部手工维护了服务与实例的对应关系
#user-service.ribbon.listOfServers=http://localhost:8080/,http://localhost:8081/

###整合了服务治理框架Eureka或者Consul的配置
##对符合/user-service/**规则的请求路径转发到名为user-service的服务实例上去的路由规则
##格式为zuul.routes.<route>.path=<path>;zuul.routes.<route>.serviceId=<serviceId>
#zuul.routes.user-service.path=/user-service/**
#zuul.routes.user-service.service-id=user-service

##更加简单的配置zuul.routes.<serviceId>=<path>,其实等同于上面的两个配置结合
#zuul.routes.user-service=/user-service/**